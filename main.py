#aiogram
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command, CommandObject

#project-files
from config import j, current_note
from db_controller import DataBase
import keyboards

#modules
from datetime import datetime
import asyncio

class TGBOT_ToDoList:
    def __init__(self, TOKEN: str, ADMIN: str = None) -> None:
        self.bot = Bot(TOKEN)
        self.dp = Dispatcher()
        self.db = DataBase(db_path = 'data\\data.db', table_name = 'notes')
        self.ADMIN = ADMIN
        
    async def listen(self) -> None:
        # -- start --
        @self.dp.message(Command('start'))
        async def start(message: Message) -> None:
            await message.answer(
                text = """
                <b>–ü—Ä–∏–≤–µ—Ç</b>üñê!
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TodoList –±–æ—Ç!
                –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è –±–æ—Ç–æ–º - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /commands
                """, 
                parse_mode = 'html'
                )
            
        # -- commands --
        @self.dp.message(Command(commands = ('commands', 'help')))
        async def show_list_commands(message: Message) -> None:
            with open('data\\list_commands.txt', 'r') as file:
                await message.answer(text = file.read(), parse_mode = 'html')
              
        # -- create_note --  
        @self.dp.message(Command('create'))
        async def create_note(message: Message) -> None:
            await message.answer("–û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∑–∞–º–µ—Ç–∫–∏üìù...")
            
        # -- notes --
        @self.dp.message(Command('notes'))
        async def show_notes(message: Message) -> None:
            try:
                notes = self.db.notes()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
                print(f"Notes fetched: {notes}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
                
                if not notes:
                    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
                    return
                else:
                    text: str = ""
                    for index in notes:
                        text += f"-- {index[0]}\n<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:{index[1]}</b>\n\n"
                        
                    await message.answer(text = text, parse_mode = 'html')
                    
                keyboard = keyboards.make_button_list(notes)  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                
                await message.answer(
                    text="<b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫</b>üî•",
                    parse_mode='html',
                    reply_markup=keyboard
                )
            except Exception as e:
                print(f"Error in show_notes: {e}")

        # -- echo --
        @self.dp.message()
        async def echo(message: Message) -> None:
            """
            -- add data in database
            -- update keyboard 
            -- delete note

            –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–º–µ—Ç–∫–∞ –≤ –ë–î –∏–ª–∏ –Ω–µ—Ç.
            –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∞ –µ—Å—Ç—å –≤ –ë–î, —Ç–æ —É–¥–∞–ª—è–µ–º –µ—ë, –∞ –µ—Å–ª–∏ –Ω–µ—Ç—É, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
            """
            
            status_delete: bool = False
            
            for index in self.db.notes():
                if message.text == index[0]:
                    current_note = message.text
                    
                    self.db.delete_note(description_note = current_note) #delete note
                    status_delete = True
                    current_note = None
                    
                    await message.answer(text = '–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞! üóë')
                    break
                
            if status_delete is False:
                #Add note to DB
                self.db.add_note(
                    description = message.text,
                    date = datetime.now().strftime("%H:%M:%S")
                )
            
                #answer message
                await message.answer(
                    text = "<b>–ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞</b>‚úÖ\n–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notes —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏",
                    parse_mode = 'html'
                )
            
            #build keyboard notes
            notes = self.db.notes()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
            print(f"Notes fetched: {notes}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
            
            if not notes:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫! ‚ùå")
                return
                
            keyboard = keyboards.make_button_list(notes)  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            
            await message.answer(
                text="<b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫</b>üî•",
                parse_mode='html',
                reply_markup=keyboard
            )
                
    async def main(self) -> None:
        current_time = datetime.now().strftime("%H:%M:%S")
        print(f"{self.ADMIN} is started bot! [{current_time}]")
        
        await self.bot.delete_webhook(drop_pending_updates = True)
        await self.dp.start_polling(self.bot)
        
if __name__ == '__main__':
    tg_bot = TGBOT_ToDoList(TOKEN = j["TOKEN"], ADMIN = j["ADMIN"])    
    asyncio.run(tg_bot.listen())
    asyncio.run(tg_bot.main())
    
